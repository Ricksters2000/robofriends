{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SeachBox.js","Components/Scroll.js","Components/ErrorBoundry.js","Components/CounterButton.js","Components/Header.js","constants.js","Containers/App.js","actions.js","reportWebVitals.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","cardComponent","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","CounterButton","updateCount","count","nextProps","nextState","console","log","color","onClick","PureComponent","Header","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","connect","searchField","searchRobots","requestRobots","isPending","dispatch","onSearchChange","event","text","target","value","payload","onRequestRobots","fetch","then","response","json","data","catch","err","useEffect","filteredRobots","filter","obj","toLowerCase","includes","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAceA,EAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GACxB,OACI,sBAAKC,UAAU,sDAAf,UACI,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,gCACI,6BAAKF,IACL,4BAAIC,WCULK,EAfE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAMTC,EAAgBD,EAAOE,KAAI,SAACC,EAAMC,GAAP,OAAa,cAAC,EAAD,CAAcX,KAAMO,EAAOI,GAAGX,KAAME,GAAIK,EAAOI,GAAGT,GAAID,MAAOM,EAAOI,GAAGV,OAA5DU,MAEzD,OACI,8BACKH,KCHEI,EARG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,qBAAKV,UAAU,MAAf,SACI,uBAAOA,UAAU,mCAAmCW,KAAK,SAASC,YAAY,gBAAgBC,SAAUH,OCKrGI,EARA,SAACC,GACZ,OACI,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACKJ,EAAMK,Y,4BCiBJC,E,kDAnBX,WAAYN,GAAQ,IAAD,8BACf,cAAMA,IACDO,MAAQ,CACTC,UAAU,GAHC,E,qDAOnB,SAAkBC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,oBAG7B,WACI,OAAGG,KAAKJ,MAAMC,SACH,uFAEJG,KAAKX,MAAMK,a,GAhBCQ,aC6BZC,E,kDA5BX,aAAe,IAAD,8BACV,gBAaJC,YAAc,WACV,EAAKH,UAAS,SAAAL,GACV,MAAO,CAACS,MAAOT,EAAMS,MAAQ,OAdjC,EAAKT,MAAQ,CACTS,MAAO,GAHD,E,yDAOd,SAAsBC,EAAWC,GAC7B,OAAGP,KAAKJ,MAAMS,QAAUE,EAAUF,Q,oBAYtC,WAEI,OADAG,QAAQC,IAAI,iBAER,yBAAQC,MAAOV,KAAKX,MAAMqB,MAAOC,QAASX,KAAKI,YAA/C,oBAAoEJ,KAAKJ,MAAMS,a,GAxB/DO,iBCiBbC,E,4JAXX,WAEI,OADAL,QAAQC,IAAI,UAER,gCACI,oBAAInC,UAAU,KAAd,yBACA,cAAC,EAAD,CAAeoC,MAAO,e,GAVjBR,aCHRY,G,MAAsB,uBAEtBC,EAAyB,yBACzBC,EAAyB,yBACzBC,EAAwB,wBCiFtBC,eAzES,SAAAtB,GACpB,MAAO,CACHuB,YAAavB,EAAMwB,aAAaD,YAChCzC,OAAQkB,EAAMyB,cAAc3C,OAC5B4C,UAAW1B,EAAMyB,cAAcC,UAC/BxB,MAAOF,EAAMyB,cAAcvB,UAIR,SAACyB,GACxB,MAAO,CACHC,eAAgB,SAACC,GAAD,OAAWF,GChBJG,EDgB4BD,EAAME,OAAOC,MChB/B,CACrC3C,KAAM6B,EACNe,QAASH,KAFiB,IAACA,GDiBvBI,gBAAiB,kBAAMP,GCZI,SAACA,GAChCA,EAAS,CAACtC,KAAM8B,IAChBgB,MAAM,4CACJC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAI,OAAIZ,EAAS,CAACtC,KAAM+B,EAAwBa,QAASM,OAC9DC,OAAM,SAAAC,GAAG,OAAId,EAAS,CAACtC,KAAMgC,EAAuBY,QAASQ,cDoEpDnB,EAzDH,SAAC,GAA8E,IAA7EC,EAA4E,EAA5EA,YAAazC,EAA+D,EAA/DA,OAAQ4C,EAAuD,EAAvDA,UAAkBE,GAAqC,EAA5C1B,MAA4C,EAArC0B,gBAAgBM,EAAqB,EAArBA,gBAsBjEQ,qBAAoB,WAKhBR,MACD,IASC,IAAMS,EAAiB7D,EAAO8D,QAAO,SAAAC,GAAG,OAAIA,EAAItE,KAAKuE,cAAcC,SAASxB,EAAYuB,kBAExF,OAAGpB,EACQ,yCAGH,sBAAKhD,UAAU,KAAf,UACI,cAAC,EAAD,IACA,cAAC,EAAD,CAAWU,aAAcwC,IACzB,cAAC,EAAD,UACI,cAAC,EAAD,UACI,cAAC,EAAD,CAAU9C,OAAQ6D,cEhE/BK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCARO,EAAqB,CACvBjC,YAAa,IAYXkC,EAAqB,CACvB/B,WAAW,EACX5C,OAAQ,GACRoB,MAAO,ICXLwD,G,MAASC,0BAETC,EAAcC,YAAgB,CAACrC,aDHT,WAA0C,IAAzCxB,EAAwC,uDAAlCwD,EAAoBM,EAAc,uDAAP,GAC1D,OAAOA,EAAOzE,MACV,KAAK6B,EACD,OAAO6C,OAAOC,OAAO,GAAIhE,EAAO,CAACuB,YAAauC,EAAO7B,UACzD,QACI,OAAOjC,ICFgCyB,cDYtB,WAA0C,IAAzCzB,EAAwC,uDAAlCyD,EAAoBK,EAAc,uDAAP,GAC3D,OAAOA,EAAOzE,MACV,KAAK8B,EACD,OAAO4C,OAAOC,OAAO,GAAIhE,EAAO,CAAC0B,WAAW,IAChD,KAAKN,EACD,OAAO2C,OAAOC,OAAO,GAAIhE,EAAO,CAAClB,OAAQgF,EAAO7B,QAASP,WAAW,IACxE,KAAKL,EACD,OAAO0C,OAAOC,OAAO,GAAIhE,EAAO,CAACE,MAAO4D,EAAO7B,QAASP,WAAW,IACvE,QACI,OAAO1B,MCpBbiE,EAAQC,YAAYN,EAAaO,YAAgBC,IAAiBV,IAExEW,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJO,SAASC,eAAe,SAM1BzB,M","file":"static/js/main.49c676f9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robtos' src={`https://robohash.org/${id}?200x200`}></img>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n    //used to return an error with the help of error boundries (useful for displaying user-friendly errors)\r\n    // if(true) {\r\n    //     throw new Error('has recieved an error');\r\n    // }\r\n\r\n    const cardComponent = robots.map((user, i) => <Card key={i} name={robots[i].name} id={robots[i].id} email={robots[i].email} />);\r\n    \r\n    return(\r\n        <div>\r\n            {cardComponent}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input className='pa3 ba b--green bg-lightest-blue' type='search' placeholder='search robots' onChange={searchChange} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({hasError: true});\r\n    }\r\n\r\n    render() {\r\n        if(this.state.hasError) {\r\n            return <h1>We got error eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, {PureComponent} from 'react';\r\n\r\nclass CounterButton extends PureComponent {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            count: 0\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if(this.state.count !== nextState.count)\r\n            return true;\r\n\r\n        return false;\r\n    }\r\n\r\n    updateCount = () => {\r\n        this.setState(state => {\r\n            return {count: state.count + 1}\r\n        });\r\n    }\r\n\r\n    render() {\r\n        console.log('CounterButton');\r\n        return (\r\n            <button color={this.props.color} onClick={this.updateCount}>Count: {this.state.count}</button>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CounterButton;","import React, {Component} from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nclass Header extends Component {\r\n    // shouldComponentUpdate(nextProps, nextState) {\r\n    //     return false;\r\n    // }\r\n\r\n    render() {\r\n        console.log('Header');\r\n        return (\r\n            <div>\r\n                <h1 className='f1'>RoboFriends</h1>\r\n                <CounterButton color={'red'} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React, {useState, useEffect} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport CardList from '../Components/CardList';\r\n// import {robots} from './robots';\r\nimport SearchBox from '../Components/SeachBox';\r\nimport Scroll from '../Components/Scroll';\r\nimport ErrorBoundry from '../Components/ErrorBoundry';\r\nimport Header from '../Components/Header';\r\nimport './App.css'\r\n\r\nimport {requestRobots, setSearchField} from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nconst App = ({searchField, robots, isPending, error, onSearchChange, onRequestRobots}) => {\r\n    //with states:\r\n    // constructor() {\r\n    //     super();\r\n    //     this.state = {\r\n    //         robots: [],\r\n    //         searchfield: ''\r\n    //     }\r\n    // }\r\n\r\n    // componentDidMount() {\r\n    //     fetch('https://jsonplaceholder.typicode.com/users')\r\n    //     .then(response=> response.json())\r\n    //     .then(users => this.setState({robots: users}));\r\n        \r\n    // }\r\n\r\n    //with hooks:\r\n    // const [robots, setRobots] = useState([]);\r\n    // const [searchfield, setSearchfield] = useState('');\r\n    \r\n    //with hooks:\r\n    useEffect(/*async*/ () => {\r\n        // const resp = await fetch('https://jsonplaceholder.typicode.com/users');\r\n        // const users = await resp.json();\r\n        // setRobots(users);\r\n\r\n        onRequestRobots();\r\n    }, [])\r\n\r\n    // const onSearchChange = (event) => {\r\n    //     //this.setState({searchfield: event.target.value});\r\n    //     setSearchfield(event.target.value);\r\n    // }\r\n\r\n    // render() {\r\n        //const {robots, searchfield} = this.state\r\n        const filteredRobots = robots.filter(obj => obj.name.toLowerCase().includes(searchField.toLowerCase()));\r\n\r\n        if(isPending) {\r\n            return <h1>Loading</h1>\r\n        } else {\r\n            return (\r\n                <div className='tc'>\r\n                    <Header />\r\n                    <SearchBox searchChange={onSearchChange} />\r\n                    <Scroll>\r\n                        <ErrorBoundry>\r\n                            <CardList robots={filteredRobots} />\r\n                        </ErrorBoundry>\r\n                    </Scroll>\r\n                </div>\r\n            )\r\n        }\r\n    //}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https:jsonplaceholder.typicode.com/users')\r\n     .then(response=> response.json())\r\n     .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n     .catch(err => dispatch({type: REQUEST_ROBOTS_FAILED, payload: err}))\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, {isPending: true});\r\n        case REQUEST_ROBOTS_SUCCESS: \r\n            return Object.assign({}, state, {robots: action.payload, isPending: false});\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, {error: action.payload, isPending: false});\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider, connect} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './Containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport {searchRobots, requestRobots} from './reducers';\nimport 'tachyons'\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}